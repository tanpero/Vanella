{
  "version": 3,
  "sources": ["../src/main.ts", "../src/html-generator.ts", "../src/directory-tree.ts"],
  "sourcesContent": ["import { BrowserWindow, app, ipcMain, dialog, shell, ipcRenderer, globalShortcut } from 'electron'\nimport { join, dirname, basename, extname } from 'path'\nimport * as fs from 'fs'\nimport { generateHTML } from './html-generator'\nimport { generateTreeHTML } from './directory-tree'\nimport mime, { Mime } from 'mime'\nimport { encode } from 'node-base64-image'\n\nconst main = () => {\n    onReady()\n    appListens()\n}\n\nconst onReady = () => {\n    app.whenReady().then(() => {\n        const mainWindow = createWindow()\n        mainWindowListens(mainWindow)\n\n        // \u5C4F\u853D\u6389 Electron \u7684 Ctrl - \u4E0E Ctrl = \u9ED8\u8BA4\u884C\u4E3A\n        globalShortcut.register('CommandOrControl+-', () => {})\n        globalShortcut.register('CommandOrControl+Shift+=', () => {})\n    })\n}\n\nlet lastDirPath = ''\nconst toGenerateTreeView = (event, filePath) => {\n    setTimeout(() => {\n        if (!lastDirPath || !dirname(filePath).startsWith(lastDirPath)) {\n            generateTreeHTML(filePath)\n                .then(data => event.reply('generated-directory-tree-view', data))\n                .then(() => lastDirPath = dirname(filePath))\n        }\n    }, 500)\n}\n\n\n\n\nconst mainWindowListens = (mainWindow: BrowserWindow) => {\n\n    mainWindow.webContents.on(\"did-finish-load\", (event, args) => {\n        mainWindow.webContents.setZoomFactor(1)\n        mainWindow.webContents.setVisualZoomLevelLimits(1, 1)\n    })\n\n    ipcMain.on('minimize', () => mainWindow.minimize())\n    ipcMain.on('maximize', () => mainWindow.maximize())\n    ipcMain.on('unmaximize', () => mainWindow.unmaximize())    \n    ipcMain.on('close', () => mainWindow.close())\n    ipcMain.on('to-close', event => event.reply('to-check-if-be-saved'))\n\n    ipcMain.on('open-file-dialog', async (event) => {\n        try {\n            const result = await dialog.showOpenDialog({\n                properties: ['openFile'],\n                filters: [{ name: 'Markdown Files', extensions: ['md', 'markdown'] }],\n            })\n            event.reply('open-file-dialog-reply', result)\n        } catch (error) {\n            console.error('Error opening file dialog:', error)\n            event.reply('open-file-dialog-reply', { error: error.message })\n        }\n    })\n\n    \n    ipcMain.on('open-file', async (event, filePath) => {\n        try {\n            toGenerateTreeView(event, filePath)\n            const fileContent = await fs.promises.readFile(filePath, 'utf-8')\n            event.reply('file-content', filePath, dirname(filePath), fileContent)\n        } catch (error) {\n            event.reply('file-error', error.message)\n        }\n    })\n\n    ipcMain.on('save-file-dialog', async (event, contentToSave) => {\n        try {\n            const result = await dialog.showSaveDialog({\n                properties: ['createDirectory'],\n                filters: [{ name: 'Markdown Files', extensions: ['md', 'markdown'] }],\n            })\n    \n            if (!result.canceled) {\n                await fs.promises.writeFile(result.filePath as fs.PathLike, contentToSave, 'utf-8')\n                event.reply('save-file-dialog-reply', { filePath: result.filePath })\n                toGenerateTreeView(event, result.filePath)\n            } else {\n                event.reply('save-file-dialog-reply', { canceled: true })\n            }\n        } catch (error) {\n            console.error('Error saving file:', error)\n            event.reply('save-file-dialog-reply', { error: error.message })\n        }\n    })\n    \n    ipcMain.on('save-file', async (event, { filePath, contentToSave }) => {\n        try {\n            await fs.promises.writeFile(filePath, contentToSave, 'utf-8')\n            event.reply('file-saved', filePath, dirname(filePath))\n        } catch (error) {\n            console.error('Error saving file:', error)\n            event.reply('file-save-error', { error: error.message })\n        }\n    })\n    \n    ipcMain.on('save-as-file-dialog', async (event, contentToSave) => {\n        try {\n            const result = await dialog.showSaveDialog({\n                properties: ['createDirectory'],\n                filters: [{ name: 'Markdown Files', extensions: ['md', 'markdown'] }],\n            })\n    \n            if (!result.canceled) {\n                await fs.promises.writeFile(result.filePath as fs.PathLike, contentToSave, 'utf-8')\n                event.reply('save-as-file-dialog-reply', { filePath: result.filePath })\n                toGenerateTreeView(event, result.filePath)\n            } else {\n                event.reply('save-as-file-dialog-reply', { canceled: true })\n            }\n        } catch (error) {\n            console.error('Error saving file as:', error)\n            event.reply('save-as-file-dialog-reply', { error: error.message })\n        }\n    })\n\n    ipcMain.on('to-generate-html', async (event, { filePath, contentToExport }) => {\n        const baseName = basename(filePath, extname(filePath))\n        try {\n            await fs.promises.writeFile(\n                join(dirname(filePath), baseName + '.html'),\n                await generateHTML(baseName, contentToExport, true))\n        } catch (error) {\n            console.error('Error exporting HTML:', error)\n        }\n    })\n\n    ipcMain.handle('read-file-as-base64', async (event, { filePath }) => {\n\n        let result: string = fs.readFileSync(filePath).toString('base64')\n        try {\n            return result\n        } catch (error) {\n            console.log(error)\n        }\n    })\n}\n\nconst createWindow = () => {\n    const win = new BrowserWindow({\n        width: 800,\n        height: 600,\n        transparent: true,\n        resizable: true,\n        frame: false,\n        titleBarStyle: 'hidden',\n        webPreferences: {\n            webSecurity: false,\n            nodeIntegration: true,\n            preload: join(__dirname, 'preload.js'),\n            experimentalFeatures: true,\n        }\n    })\n    const path = join(__dirname, 'app', 'index.html')\n    win.loadFile(path)\n    return win\n}\n\nconst appListens = () => {\n    app.on('window-all-closed', () => {\n        if (process.platform !== 'darwin')\n            app.quit()\n    })\n    app.on('activate', () => {\n        if (BrowserWindow.getAllWindows().length === 0)\n            createWindow()\n    })\n    app.on('web-contents-created', (e, webContents) => {\n        webContents.on('will-navigate', (event, url) => {\n            event.preventDefault()\n            shell.openExternal(url)\n        })\n    })\n}\n\nmain()\n\n", "export const generateHTML = (title: string, input: string, withStyle: boolean = false): string => {\r\n    const lines = input.split('\\n')\r\n    \r\n    const htmlHeader = `<!DOCTYPE html>\r\n<html>\r\n<head>\r\n  <title>${title}</title>\r\n  <meta charset=\"utf-8\" />\r\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\r\n  ${withStyle ? insertStyle() : ''}\r\n  </head>\r\n  <body>\r\n  <div class=\"container\">`\r\n\r\n    const htmlFooter = '\\n</div>\\n</body>\\n</html>\\n'\r\n    \r\n    // \u7EC4\u5408\u5934\u90E8\u3001\u5185\u5BB9\u548C\u5C3E\u90E8\r\n    const formattedHTML = `${htmlHeader}\\n${lines.join('\\n')}${htmlFooter}\\n`\r\n    \r\n    return formattedHTML\r\n}\r\n\r\nconst insertStyle = () => String.raw`\r\n  <style>\r\n\r\n    body {\r\n        background-color: black;\r\n        display: flex;\r\n        justify-content: center;\r\n    }\r\n    .container {\r\n        color: white;\r\n        width: 75%;\r\n        filter: revert(0.862745) hue-rotate(180deg);\r\n    }\r\n    \r\n    table{width:100%;border-collapse:collapse;border:3px solid #fff}table th,table td{border:1px solid #fff;padding:10px;vertical-align:middle;background-color:transparent;color:#fff}table th{background-color:#33333385;color:#fff}table thead{border-collapse:collapse;border-spacing:0}table thead td{height:0}table thead th{display:none;height:0;border:0}table thead th:first-child{border-left:0}table thead th:last-child{border-right:0}table thead th:not(:first-child):not(:last-child){border-left:0;border-right:0}table thead th:first-child:nth-last-child(2),table thead th:first-child:nth-last-child(2)~th{border-bottom:3px solid}table tbody tr>*{border:1px solid #fff;padding:5px;background-color:transparent}table tbody tr table,table tbody tr ul,table tbody tr ol,table tbody tr blockquote,table tbody tr img,table tbody tr svg{width:100%;margin:0;padding:0}table tbody tr table{border:1px solid #fff;margin-top:5px;margin-bottom:5px}table tbody tr ul,table tbody tr ol{list-style:none;padding-left:10px;margin-top:5px;margin-bottom:5px}table tbody tr blockquote{border-left:4px solid #333;padding:10px;margin:5px 0}table tbody tr img,table tbody tr svg{max-width:100%;height:auto}pre{position:relative}pre code{display:block;position:relative;border-radius:4px;font-family:Consolas,Monaco,monospace;overflow-x:auto}pre .filename{position:absolute;top:0;left:0;background:#f0f0f0;padding:.2em .5em;font-size:.8em;color:#666;border-bottom-right-radius:.3em}pre .language{position:absolute;top:0;left:0;background:#e0e0e0;padding:.2em .5em;font-size:.8em;color:#333;border-bottom-right-radius:.3em}pre .file-name,pre .language-name{padding:4px 8px;margin-bottom:4px;display:inline-block}pre .file-name{background-color:#eef;color:#007acc;border-radius:4px}pre .language-name{background-color:#efe;color:#282;border-radius:4px}h1,h2,h3,h4,h5,h6{margin-top:15px;box-sizing:border-box;color:#dedede}h1:empty,h2:empty,h3:empty,h4:empty,h5:empty,h6:empty{display:none}h1{padding-top:20px;padding-bottom:10px;margin-bottom:10px;border-bottom-color:#cbcbcb;border-bottom-style:solid;border-bottom-width:1px;font-size:2.5rem}h2{padding-top:15px;padding-bottom:5px;margin-bottom:8px;border-bottom-color:#aaa;border-bottom-style:solid;border-bottom-width:1px;font-size:1.8rem}h3{padding-top:10px;padding-bottom:5px;font-size:1.4rem}h4{padding-top:8px;margin-bottom:0;font-size:1.2rem}h5{margin-bottom:0;font-size:1.1rem}h6{margin-bottom:0;font-size:1rem}.container>h1:first-child,.container>h2:first-child,.container>h3:first-child,.container>h4:first-child,.container>h5:first-child,.container>h6:first-child{margin-top:30px}p{text-indent:2em;margin-bottom:1.326em;white-space:break-spaces;word-wrap:break-word;word-break:break-all;line-height:2.7em}a{text-decoration:underline;color:#14e692}a:active,a:hover{color:#14cae6}a:active,a:hover{cursor:pointer}.dropcap{color:red;float:left;font-size:5rem;line-height:3.5rem;margin:0;padding:.5rem}.invisible{clip:rect(1px,1px,1px,1px);height:1px;overflow:hidden;position:absolute;top:auto;white-space:nowrap;width:1px;display:none}img{max-width:80%;max-height:80%;margin:auto;display:block}ul{list-style-type:none;padding-left:2em;margin:0}ul>li{position:relative;padding-left:1em;margin-bottom:.5em;line-height:1.5}ul>li:before{content:\"\\2022\";position:absolute;left:-1em;color:#7d8a9f}ol{list-style-type:none;counter-reset:li;padding-left:2em;margin:0}ol>li{position:relative;padding-left:1em;margin-bottom:.5em;line-height:1.5}ol>li:before{content:counter(li) \". \";counter-increment:li;position:absolute;left:-2em;width:2em;text-align:right;color:#7d8a9f}blockquote{display:block;clear:both;font-size:1em;font-style:normal;line-height:1.8;text-indent:0;border:none;color:#c1d5b9;margin-block-start:1em;margin-block-end:1em;margin-inline-start:40px;margin-inline-end:40px;position:relative;padding-top:20px;padding-bottom:20px}blockquote:before{content:\"\\201c\";left:0;top:0;transform:translateY(-100%) translate(-100%);color:#e0e0e0;font-size:4em;font-family:Arial,serif;line-height:1em;font-weight:700;position:absolute;margin-top:1em;margin-bottom:1em}blockquote:after{content:\"\\201d\";right:0;bottom:0;transform:translateY(100%) translate(100%);color:#e0e0e0;font-size:4em;font-family:Arial,serif;line-height:1em;font-weight:700;position:absolute;margin-top:1em;margin-bottom:1em}ul[name=user-content-table-of-contents]{list-style-type:none;padding-left:2em;margin:0}ul[name=user-content-table-of-contents] p{text-indent:0;margin:0;padding:0}ul[name=user-content-table-of-contents]>li{position:relative;padding-left:1em;margin-bottom:.3em}ul[name=user-content-table-of-contents]>li:before{display:none}ul[name=user-content-table-of-contents]>li ul{list-style-type:none;padding-left:2em}ul[name=user-content-table-of-contents]>li ul>li{position:relative;padding-left:1em;margin-bottom:.3em}ul[name=user-content-table-of-contents]>li ul>li:before{display:none}ul[name=user-content-table-of-contents]>li ul>li ul{padding-left:4em}pre code.hljs{display:block;overflow-x:auto;padding:1em}code.hljs{padding:3px 5px}.hljs{background:#272822;color:#ddd}.hljs-tag,.hljs-keyword,.hljs-selector-tag,.hljs-literal,.hljs-strong,.hljs-name{color:#f92672}.hljs-code{color:#66d9ef}.hljs-attribute,.hljs-symbol,.hljs-regexp,.hljs-link{color:#bf79db}.hljs-string,.hljs-bullet,.hljs-subst,.hljs-title,.hljs-section,.hljs-emphasis,.hljs-type,.hljs-built_in,.hljs-selector-attr,.hljs-selector-pseudo,.hljs-addition,.hljs-variable,.hljs-template-tag,.hljs-template-variable{color:#a6e22e}.hljs-title.class_,.hljs-class .hljs-title{color:#fff}.hljs-comment,.hljs-quote,.hljs-deletion,.hljs-meta{color:#75715e}.hljs-keyword,.hljs-selector-tag,.hljs-literal,.hljs-doctag,.hljs-title,.hljs-section,.hljs-type,.hljs-selector-id{font-weight:700}\r\n    \r\n  </style>`\r\n", "import * as fs from 'fs'\r\nimport * as path from 'path'\r\n\r\n\r\ninterface TreeNode {\r\n  id: number\r\n  name: string,\r\n  fullPath?: string,\r\n  parentId: number | null\r\n  fileCount: number\r\n  children?: TreeNode[]\r\n}\r\n\r\nfunction isHidden(filePath: string): boolean {\r\n  const stats = fs.statSync(filePath)\r\n  return (stats.mode & 0o777) === 0\r\n}\r\n\r\nconst availableExt = ['.md', '.markdown', '.txt']\r\nfunction isAvailableFile(filePath: string): boolean {\r\n  return availableExt.includes(path.extname(filePath).toLocaleLowerCase())\r\n}\r\n\r\nconst generateDirectoryTree = (directoryPath: string, parentId: number | null = null): Promise<TreeNode> => {\r\n  return new Promise(async (resolve, reject) => {\r\n    try {\r\n      const contents = fs.readdirSync(directoryPath)\r\n      let fileCount = 0\r\n\r\n      const children: TreeNode[] = []\r\n      await contents.forEach(async (content, index) => {\r\n        const fullPath = path.join(directoryPath, content)\r\n        const stats = await fs.statSync(fullPath)\r\n\r\n        const node: TreeNode = {\r\n          id: index + 1,\r\n          name: content,\r\n          fullPath,\r\n          parentId: parentId,\r\n          fileCount: 0,\r\n        }\r\n\r\n        if (!isHidden(fullPath) && !content.startsWith('.')) {\r\n          if (stats.isDirectory()) {\r\n            // If it's a directory, recursively generate the tree for its contents\r\n            const subTree = await generateDirectoryTree(fullPath, node.id)\r\n            node.children = subTree.children\r\n            node.fileCount = subTree.fileCount\r\n            children.push(node)\r\n          } else if (isAvailableFile(content)) {\r\n            node.fileCount = 1\r\n            fileCount++\r\n            children.push(node)\r\n          }\r\n        }      \r\n\r\n      })\r\n\r\n      const sortedChildren = await children.sort((a, b) => {\r\n        // Sort by directories first, then files, in alphabetical order\r\n        if (a.children && !b.children) return -1 // a is a directory, b is a file\r\n        if (!a.children && b.children) return 1 // b is a directory, a is a file\r\n        return a.name.localeCompare(b.name)\r\n      })\r\n\r\n      const tree: TreeNode = {\r\n        id: parentId !== null ? parentId : 1,\r\n        name: path.basename(directoryPath),\r\n        parentId: parentId,\r\n        fileCount: fileCount,\r\n        children: sortedChildren,\r\n      }\r\n\r\n      resolve(tree)\r\n    } catch (error) {\r\n      reject(error)\r\n    }\r\n  })\r\n}\r\n\r\nconst generateDirectoryTreeView = childs => {\r\n  let html = ''\r\n  childs.forEach(el => {\r\n    html += `<details>\\n<summary><span class=\"tree-item\" title=\"${\r\n      el.name\r\n    }\" data-id=\"${\r\n      el.id\r\n    }\" ${\r\n      el.fullPath ? `onclick=\"switchFile('${el.fullPath.replaceAll('\\\\', '\\\\\\\\')}')\" ` : ''\r\n    }>${\r\n      el.name\r\n    }</span></summary>`\r\n\r\n    if (el.children && el.children.length) {\r\n      html += generateDirectoryTreeView(el.children) // \u5982\u679C\u6709chidren\u5C31\u7EE7\u7EED\u904D\u5386\r\n    }\r\n    html += `</details>`\r\n  })\r\n\r\n  return html\r\n}\r\n\r\n\r\nconst generateCurrentDirectoryTree = async filePath =>\r\n    await generateDirectoryTree(path.dirname(filePath))\r\n\r\nexport const generateTreeHTML = async filePath =>\r\n    await generateDirectoryTreeView((await generateCurrentDirectoryTree(filePath)).children)\r\n"],
  "mappings": "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",
  "names": ["fs", "path"]
}
